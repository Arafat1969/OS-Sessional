diff --git a/Makefile b/Makefile
index 62fd0f8..3884f52 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/rand.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -139,6 +140,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +163,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..9db0f01 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int 		    settickets(int);
+int 		    getpinfo(uint64);
+// int 		    getCurrentActiveTickets(int);
+// int 		    getRunningProcess(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +191,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+//rand.c
+long            genrand(int);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..928881f 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,15 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_0 2   // for q0(topmost queue)
+#define TIME_LIMIT_1 4   //for q1(bottom queue)
+#define WAIT_THRESH  6  //threshold time for aging
+#define DEFAULT_TICKETS 10 //default number of tickets
+#define RESET "\033[0m"
+#define RED "\033[31m"
+#define GREEN "\033[32m"
+#define YELLOW "\033[33m"
+#define BLUE "\033[34m"
+#define MAGENTA "\033[35m"
+#define CYAN "\033[36m"
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..e19ac11 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -13,6 +14,11 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+
+//offline 3 ->s
+int print_logs=1;
+//offline 3 ->e
+ 
 struct spinlock pid_lock;
 
 extern void forkret(void);
@@ -114,6 +120,18 @@ allocproc(void)
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+
+      //offline 3 ->s
+      p->tickets_original = DEFAULT_TICKETS;
+      p->tickets_current = DEFAULT_TICKETS;
+      p->times_scheduled=0;
+      p->inQ=0;
+      p->running_time=0;
+      p->waiting_time=0;
+      p->queue_ticks[0]=0;
+      p->queue_ticks[1]=0;
+      //offline 3 ->e
+
       goto found;
     } else {
       release(&p->lock);
@@ -162,7 +180,7 @@ freeproc(struct proc *p)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
-  p->pid = 0;
+  // p->pid = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -318,8 +336,26 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+
+  //offline 3 ->s
+  int tickets_original = 0;
+  acquire(&p->lock);
+  tickets_original = p->tickets_original;
+  release(&p->lock);
+  //offline 3 -> e
+
   acquire(&np->lock);
+
+  //offline 3 ->s
+  np->tickets_original = tickets_original;
+  np->tickets_current = tickets_original;
+  np->times_scheduled = 0;
   np->state = RUNNABLE;
+  np->inQ = p->inQ;
+  np->queue_ticks[0] = 0;
+  np->queue_ticks[1] = 0;
+  //offline 3 ->e
+
   release(&np->lock);
 
   return pid;
@@ -441,38 +477,288 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
+//offline 3 ->s
+//static int last_proc = 0;
+//offline 3 ->e
+
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-
   c->proc = 0;
   for(;;){
-    // The most recent process to run may have had interrupts
-    // turned off; enable them to avoid a deadlock if all
-    // processes are waiting.
+    // Enable interrupts on this processor.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    // Lottery Scheduling for Queue 0
+    while (1) {
+      int total_tickets = 0;
+      int has_runnable_queue0 = 0;
+
+      for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->inQ == 0) {
+          total_tickets += p->tickets_current;
+        }
+        release(&p->lock);
+      }
+        
+      if (total_tickets == 0) {
+        for (p = proc; p < &proc[NPROC]; p++) {
+          acquire(&p->lock);
+          if (p->state == RUNNABLE && p->inQ == 0) {
+            p->tickets_current = p->tickets_original;
+            total_tickets += p->tickets_current;
+          }
+          release(&p->lock);
+        }
+      }
+
+      if (total_tickets > 0) {
+        int winning_ticket = genrand(total_tickets) + 1;
+        int current_ticket = 0;
+
+        for (p = proc; p < &proc[NPROC]; p++) {
+          acquire(&p->lock);
+
+          if (p->state == RUNNABLE && p->inQ == 0) {
+            current_ticket += p->tickets_current;
+            if (current_ticket >= winning_ticket) {
+              if (print_logs) {
+                printf( BLUE "LOTTERY: Process %d (%s) won in queue 0 with tickets %d\n" RESET ,p->pid, p->name, current_ticket);
+              }
+
+              while (p->state == RUNNABLE && p->running_time < TIME_LIMIT_0) {
+                p->state = RUNNING;
+                p->waiting_time = 0;
+                c->proc = p;
+                
+                swtch(&c->context, &p->context);
+
+                p->running_time++;
+
+                if (print_logs) printf( GREEN "Process %d has spent %d ticks in queue 0\n" RESET, p->pid, p->running_time);
+
+                for (struct proc *other_p = proc; other_p < &proc[NPROC]; other_p++) {
+                  if (other_p != p && other_p->state == RUNNABLE && other_p->inQ == 1) {
+                    other_p->waiting_time++;
+                  }
+
+                  if (other_p->waiting_time >= WAIT_THRESH) {
+                    other_p->inQ = 0;
+                    if (print_logs) {
+                      printf( RED "BOOST: Process %d (%s) waited for %d tickets, promoted to queue 0\n" RESET,
+                            other_p->pid, other_p->name, other_p->waiting_time);
+                    }
+                  }
+                }
+                c->proc = 0;
+                
+                p->queue_ticks[0]++;
+              
+              }
+
+              if(p->tickets_current != 0) p->tickets_current--;
+              p->times_scheduled++;
+              // After time slice limit, demote to Queue 1
+              if (p->running_time >= TIME_LIMIT_0) {
+                  p->inQ = 1;  // Demote to queue 1
+                  if (print_logs) {
+                      printf( YELLOW "DEMO: Process %d (%s) has used up its time slice in queue 0\n" RESET,
+                              p->pid, p->name);
+                  }
+              }
+
+              p->running_time = 0;
+              // release(&p->lock);
+              // break;  // Lottery scheduling selects only one process per scheduling cycle
+            }
+
+            has_runnable_queue0 = 1;
+          }
+          release(&p->lock);
+        }
+                
+      }
+
+      if (!has_runnable_queue0) {
+          // If no runnable process in queue 0, break and move to queue 1
+          break;
+      }
+    }
+
+        // Round-Robin Scheduling for Queue 1
+    for (p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if (p->state == RUNNABLE && p->inQ == 1) {
+        // Process from queue 1 starts running
+        while (p->state == RUNNABLE && p->running_time < TIME_LIMIT_1) {
+          p->state = RUNNING;
+          c->proc = p;
+          p->waiting_time = 0;
+
+          swtch(&c->context, &p->context);
+
+          // After running, increment time slices
+          p->running_time++;
+
+          if (print_logs) printf( GREEN "Process %d has spent %d ticks in queue 1\n" RESET, p->pid, p->running_time);
+
+                    // Increment waiting ticks for other runnable processes in queue 1
+          for (struct proc *other_p = proc; other_p < &proc[NPROC]; other_p++) {
+            if (other_p != p && other_p->state == RUNNABLE && other_p->inQ == 1) {
+                other_p->waiting_time++;
+            }
+
+            if (other_p->waiting_time >= WAIT_THRESH) {
+              // other_p->waiting_time = 0;
+              other_p->inQ = 0;
+              if (print_logs) {
+                printf(RED "BOOST: Process %d (%s) waited for %d tickets, promoted to queue 0\n" RESET,
+                          other_p->pid, other_p->name, other_p->waiting_time);
+              }
+            }
+          }
+            c->proc = 0;
+            p->queue_ticks[1]++;
+        }
+
+        p->times_scheduled++;
+        // Voluntary yield promotes the process back to Queue 0
+        if (p->running_time < TIME_LIMIT_1) {
+          p->inQ = 0;
+          if (print_logs) {
+            printf( MAGENTA "PROMO: Process %d (%s) is interactive, ran for %d tickets, promoted to queue 0\n" RESET,
+                    p->pid, p->name, p->running_time);
+          }
+          release(&p->lock);
+          break;
+        }
+        p->running_time = 0;
       }
       release(&p->lock);
     }
   }
 }
 
+
+
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+
+//   c->proc = 0;
+//   for(;;){
+//     // The most recent process to run may have had interrupts
+//     // turned off; enable them to avoid a deadlock if all
+//     // processes are waiting.
+//     intr_on();
+
+//     // for(p = proc; p < &proc[NPROC]; p++) {
+//     //   acquire(&p->lock);
+//     //   if(p->state == RUNNABLE) {
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+
+//     //offline 3 ->s
+//     acquire(&tickslock);
+//     int cur_time = ticks;
+//     release(&tickslock);
+//     if(!(cur_time-proc[last_proc].last_scheduled_time>TIME_LIMIT_1 || proc[last_proc].state!= RUNNABLE)){
+//       continue;
+//     }
+//     if(getRunningProcess(0)){
+//       acquire(&tickslock);
+//       int cur_time = ticks;
+//       release(&tickslock);
+//       if(cur_time-proc[last_proc].last_scheduled_time > TIME_LIMIT_0){
+//         proc[last_proc].inQ = 1;
+//         if(getRunningProcess(0)==0)
+//           continue;
+//       }
+
+//       if(getCurrentActiveTickets(0)==0){
+//         for(p=proc;p<&proc[NPROC];p++){
+//           acquire(&p->lock);
+//           p->tickets_current = p->tickets_original;
+//         }
+//         continue;
+//       }
+//       int random= genrand(getCurrentActiveTickets(0))+1;
+//       int cumsum=0;
+//       int taken=0;
+//       int i=0;
+//       for(p=proc;p<&proc[NPROC]&& taken==0;p++){
+//         acquire(&p->lock);
+//         if(p->state==RUNNABLE){
+//           cumsum+=p->tickets_current;
+//           if(cumsum>=random && p->tickets_current != 0 && p->inQ == 1){
+//             taken=1;
+//             proc[i].tickets_current--;
+//             proc[last_proc].times_scheduled++;
+//             p->state = RUNNING;
+//             c->proc = p;
+//             swtch(&c->context, &p->context);
+//             last_proc=i;
+//             acquire(&tickslock);
+//             cur_time = ticks;
+//             release(&tickslock);
+//             p->last_scheduled_time=cur_time;
+//             c->proc = 0;
+//           }
+//         }
+//         release(&p->lock);
+//         i++;
+//       }
+//     }else{
+//       if(proc[last_proc].state!=RUNNABLE){
+//         proc[last_proc].inQ=0;
+//         acquire(&tickslock);
+//         int cur_time = ticks;
+//         release(&tickslock);
+//         proc[last_proc].last_scheduled_time=cur_time;
+//       }
+//       int i=0,j;
+//       for(i=last_proc+1,j=0;j<NPROC;i=(i+1)%NPROC, j++){
+//         p=&proc[i];
+//         acquire(&p->lock);
+//         if(p->state == RUNNABLE && p->inQ==1){
+//           proc[last_proc].times_scheduled++;
+//           p->state = RUNNING;
+//           c->proc = p;
+//           swtch(&c->context, &p->context);
+//           last_proc=i;
+//           acquire(&tickslock);
+//           cur_time = ticks;
+//           release(&tickslock);
+//           proc[last_proc].last_scheduled_time=cur_time;
+//           i++;
+//           c->proc = 0;
+//           j = NPROC+1;
+//         }
+//         release(&p->lock);
+//       }
+//     }
+//     //offline 3 ->e
+
+//     //     p->state = RUNNING;
+//     //     c->proc = p;
+//     //     swtch(&c->context, &p->context);
+
+//     //     // Process is done running for now.
+//     //     // It should have changed its p->state before coming back.
+//     //     c->proc = 0;
+//     //   }
+//     //   release(&p->lock);
+//     // }
+//   }
+// }
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -686,3 +972,80 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+//offline 3 ->s
+
+int settickets(int n){
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets_original = n;
+  p->tickets_current = n;
+  p->times_scheduled = 0;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(uint64 addr){
+  struct proc *mp = myproc();
+  struct proc *p;
+  struct pstat pst;
+  int i=0;
+  for(p=proc; p<&proc[NPROC]; p++){
+    acquire(&p->lock);
+    pst.pid[i] = p->pid;
+    if(p->state== UNUSED)
+      pst.inuse[i]=0;
+    else 
+      pst.inuse[i]=1;
+    pst.inQ[i] = p->inQ;
+    pst.waiting_time[i] = p->waiting_time;
+    pst.running_time[i] = p->running_time;
+    pst.times_scheduled[i] = p->times_scheduled;
+    pst.tickets_original[i] = p->tickets_original;
+    pst.tickets_current[i] = p->tickets_current;
+    pst.queue_ticks[i][0] = p->queue_ticks[0];
+    pst.queue_ticks[i][1] = p->queue_ticks[1];
+    release(&p->lock);
+    i++;
+  }
+
+  if(copyout(mp->pagetable, addr, (char *)&pst, sizeof(pst)) < 0){
+    return -1;
+  }
+  return 0;
+}
+
+
+// int getCurrentActiveTickets(int n){
+//   struct proc *p;
+  
+//   int tickets = 0;
+
+//   for(p = proc; p < &proc[NPROC]; p++) {
+//     acquire(&p->lock);
+//     if(p->state == RUNNABLE && p->inQ == n){
+//       tickets += p->tickets_current;
+//     }
+//     release(&p->lock);
+//   }
+//   return tickets;
+// }
+
+// int getRunningProcess(int n){
+//   struct proc *p;
+
+//   int count = 0;
+
+//   for(p = proc; p < &proc[NPROC]; p++) {
+//     acquire(&p->lock);
+//     if(p->state == RUNNING && p->inQ == n){
+//       count++;
+//     }
+//     release(&p->lock);
+//   }
+
+//   return count;
+// }
+
+//offline 3 ->e
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..b86b228 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,17 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //offline 3 -> s
+  int tickets_original;
+  int tickets_current;
+  int times_scheduled;
+  int inQ;
+  uint queue_ticks[2];
+  int waiting_time;
+  int running_time;
+  int last_scheduled_time;
+  int time_slices;
+  //offline 3 -> e
+
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..a1fb959
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+ #ifndef _PSTAT_H_
+ #define _PSTAT_H_
+ #include "param.h"
+ struct pstat {
+ int pid[NPROC]; // the process ID of each process
+ int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+ int inQ[NPROC]; // which queue the process is currently in
+ int waiting_time[NPROC]; // the time each process has spent waiting before being scheduled
+ int running_time[NPROC]; // Number of times the process was scheduled before its time slice was used
+ int times_scheduled[NPROC]; // the total number of times this process was scheduled
+ int tickets_original[NPROC]; // the number of tickets each process originally had
+ int tickets_current[NPROC]; // the number of tickets each process currently has
+ uint queue_ticks[NPROC][2]; // the total number of ticks each process has spent in each queue
+ };
+#endif // _PSTAT_H_
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..617899e
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,115 @@
+/* A C-program for MT19937: Real number version  (1998/4/6)    */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* When you use this, send an email to: matumoto@math.keio.ac.jp   */
+/* with an appropriate reference to your work.                     */
+
+/* REFERENCE                                                       */
+/* M. Matsumoto and T. Nishimura,                                  */
+/* "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform  */
+/* Pseudo-Random Number Generator",                                */
+/* ACM Transactions on Modeling and Computer Simulation,           */
+/* Vol. 8, No. 1, January 1998, pp 3--30.                          */
+
+// #include<stdio.h>
+
+/* Period parameters */
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+static int set = 0;
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(seed)
+    unsigned long seed;
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long  /* for integer generation */
+genrand(int upper)
+{
+    if( set == 0 ){
+        sgenrand(4357);
+        set = 1;
+    }
+
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+   // int mx = 1000;
+   // double val1 = ( (double)y * 2.3283064370807974e-10 );
+   // int val2 = val1*mx;
+   // return val2;
+    //return ( (double)y * 2.3283064370807974e-10 ); /* reals */
+    y = y & RAND_MAX;
+    y = y % upper;
+     return y;  /* for integer generation */
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..de69fb1 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+//#include "pstat.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -101,6 +102,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..da165ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..2dc037f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+//offline 3 -> s
+extern int print_logs;
+
+uint64
+sys_settickets(void)
+{
+  int ticket_count;
+  argint(0, &ticket_count);
+  if(ticket_count < 0){
+    return -1;
+  }else if(ticket_count == 0){
+    return settickets(DEFAULT_TICKETS);
+  }else{
+    return settickets(ticket_count);
+  }
+
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  print_logs=0;
+  uint64 addr;
+  argaddr(0, &addr);
+  if(addr < 0){
+    return -1;
+  }
+  return getpinfo(addr);
+}
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..9fce555
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+void run_child_loop(int iterations, int tickets) {
+    int loops = 0;
+    printf("CHILD: process %d with %d tickets started for %d loops\n", getpid(), tickets, iterations);
+
+    while (loops < iterations) {
+        loops += 100000000;
+        printf("Inside Child: PID %d with %d tickets ran for %d loops\n", getpid(), tickets, loops);
+        if (loops % 100000000 == 0) {
+            sleep(1);
+        }
+    }
+
+    printf("CHILD: process %d with %d tickets ran for %d loops\n", getpid(), tickets, iterations);
+}
+
+int main(int argc, char *argv[]) {
+    printf("hjbhwejfb");
+	if (argc != 3) {
+        fprintf(2, "Usage: dummyproc <tickets> <iterations>\n");
+        exit(1);
+    }
+
+	printf("choltese\n");
+
+    int tickets = atoi(argv[1]);
+    int iterations = atoi(argv[2]);
+
+    if (settickets(tickets) < 0) {
+        fprintf(2, "Error: settickets failed\n");
+        exit(1);
+    }
+
+    printf("PARENT: Called with %d tickets, %d iters. Parent will exit now.\n", tickets, iterations);
+
+    int pid = fork();
+    if (pid < 0) {
+        fprintf(2, "Error: fork failed\n");
+        exit(1);
+    } else if (pid == 0) { 
+        run_child_loop(iterations, tickets);
+        exit(0);
+    } else { 
+        wait(0);
+        printf("PARENT: Parent with pid %d exited with status 0\n", getpid());
+        
+    }
+
+    exit(0);
+	
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..c9ed1bd
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char *argv[]) {
+	struct pstat pst;
+
+	if(getpinfo(&pst)< 0){
+		fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+	}
+	
+			printf("PID | In Use | In Q | Waiting Time | Running Time | # Times Scheduled | Original Tickets | Current Tickets | q0 | q1 \n");
+	for(int i = 0; i < NPROC; i++){
+		if(pst.pid[i] != 0){
+			printf("%d        %d       %d         %d              %d                 %d                  %d                %d          %d     %d \n", pst.pid[i], pst.inuse[i], pst.inQ[i], pst.waiting_time[i], pst.running_time[i], pst.times_scheduled[i], pst.tickets_original[i], pst.tickets_current[i], pst.queue_ticks[i][0], pst.queue_ticks[i][1]);
+		}
+	}
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..b000040 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..21930eb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
