diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..347a660
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+	"files.associations": {
+		"defs.h": "c"
+	}
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..fa47102 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -85,10 +85,10 @@ void            printfinit(void);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
-int             growproc(int);
+// int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+// void            proc_freepagetable(pagetable_t, uint64);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int				growproc(int, uint64 *);
+void            proc_freepagetable(pagetable_t, uint64,int);
+int             thread_create(uint64 fcn,uint64 arg,uint64 stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void			memlock_init(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +171,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+// void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -173,6 +179,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            uvmfree(pagetable_t, uint64, int);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
+uint64			uvmunmirror(pagetable_t, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..67d1113 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -126,13 +126,15 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  // proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, 0);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    // proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, 0);
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..68634f9 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -20,6 +20,7 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    memlock_init();
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..56c9ae0 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,8 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct memlock memlock[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -43,6 +45,64 @@ proc_mapstacks(pagetable_t kpgtbl)
   }
 }
 
+void
+memlock_init(void)
+{
+  struct memlock *m;
+  for(m =memlock; m < &memlock[NPROC]; m++)
+  {
+    initlock(&m->lock, "memlock");
+    m->count = 0;
+    m->state = UNUSED;
+  }
+
+}
+
+void
+freememlock(struct memlock *m)
+{
+  m->count = 0;
+  m->state = UNUSED;
+}
+
+void
+memlock_add(struct memlock *m)
+{
+  if(m->state==UNUSED){
+    panic("Unused memlock");
+  }
+  m->count++;
+}
+
+void
+memlock_remove(struct memlock *m,struct proc* p)
+{
+  m->count--;
+  if(m->count<=0){
+    proc_freepagetable(p->pagetable, p->sz,0);
+    freememlock(m);
+  }else{
+    uvmunmirror(p->pagetable, p->sz,0);
+    proc_freepagetable(p->pagetable, 0,0);
+  }
+}
+
+void
+wakeupOthers(struct proc *p, void* chan){
+  struct proc *pp;
+
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    if(pp != myproc()&& p!=pp){
+      acquire(&pp->lock);
+      if(pp->state == SLEEPING && pp->chan == chan) {
+        pp->state = RUNNABLE;
+      }
+      release(&pp->lock);
+    }
+  }
+
+}
+
 // initialize the proc table.
 void
 procinit(void)
@@ -102,15 +162,42 @@ allocpid()
   return pid;
 }
 
+struct memlock*
+allocmemlock(void)
+{
+  struct memlock *m;
+
+  for(m=memlock;m<&memlock[NPROC];m++){
+    acquire(&m->lock);
+    if(m->state == UNUSED){
+      m->state = USED;
+      return m;
+    }else{
+      release(&m->lock);
+    }
+  }
+  return 0;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+//allocproc(void)
+allocproc(int isThread)
 {
   struct proc *p;
 
+  struct memlock *m;
+
+  if(!isThread){
+    if((m=allocmemlock())==0){
+      return 0;
+    }
+    memlock_add(m);
+  }
+
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
@@ -124,11 +211,16 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = isThread;
+
+  if(!isThread){
+    p->memlock=m;
+  }
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
-    release(&p->lock);
+    // release(&p->lock);
     return 0;
   }
 
@@ -136,10 +228,14 @@ found:
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
     freeproc(p);
-    release(&p->lock);
+    // release(&p->lock);
     return 0;
   }
 
+  if(!p->is_thread){
+    p->mem_id = p->pid;
+  }
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -149,17 +245,20 @@ found:
   return p;
 }
 
+
 // free a proc structure and the data hanging from it,
 // including user pages.
 // p->lock must be held.
 static void
 freeproc(struct proc *p)
 {
+
+  struct memlock *m;
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  // if(p->pagetable)
+  //   proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +268,18 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  p->mem_id = 0;
+  p->is_thread = 0;
+
+  if(p->pagetable){
+    memlock_remove(p->memlock,p);
+  }
+
+  m=p->memlock;
+  p->memlock=0;
+  release(&p->lock);
+  release(&m->lock);
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -189,7 +300,8 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    // uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -198,7 +310,8 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    // uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -208,11 +321,12 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz,int isThread)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  // uvmfree(pagetable, sz);
+  uvmfree(pagetable, sz, !isThread);
 }
 
 // a user program that calls exec("/init")
@@ -234,7 +348,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -252,26 +366,77 @@ userinit(void)
   p->state = RUNNABLE;
 
   release(&p->lock);
+  release(&p->memlock->lock);
+}
+
+enum growprocAction{GROW,SHRINK,DEALLOC};
+
+int
+growChild(struct proc* p,uint64 sz, int n,enum growprocAction action)
+{
+  for(struct proc* pp=proc;pp<&proc[NPROC];pp++){
+    if(pp!=p){
+      acquire(&pp->lock);
+      if(pp->mem_id==p->mem_id && p->pid!=pp->pid){
+        if(pp->sz!=sz){
+          if(action==DEALLOC){
+            uvmunmirror(pp->pagetable, pp->sz,sz);
+            p->sz=sz;
+          }
+        }
+        if(action==GROW){
+          if(uvmmirror(p->pagetable,pp->pagetable,sz,sz+n)<0 ){
+            pp->sz=sz;
+            release(&pp->lock);
+            return -1;
+          }
+          pp->sz=p->sz;
+        }else{
+          pp->sz=uvmunmirror(pp->pagetable,sz,sz+n);
+        }
+      }
+
+      release(&pp->lock);
+    }
+  }
+
+  return 0;
+
 }
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
 int
-growproc(int n)
+growproc(int n,uint64* oldsz)
 {
   uint64 sz;
   struct proc *p = myproc();
 
+  acquire(&p->memlock->lock);
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(&p->memlock->lock);
       return -1;
     }
+    if(growChild(p,sz,n,GROW)<0){
+      goto bad;
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    growChild(p,p->sz,n,SHRINK);
   }
+  *oldsz = p->sz;
+  release(&p->memlock->lock);
   p->sz = sz;
   return 0;
+
+
+  bad:
+    uvmdealloc(p->pagetable,sz,p->sz);
+    growChild(p,p->sz,n,DEALLOC);
+    release(&p->memlock->lock);
+    return -1;
 }
 
 // Create a new process, copying the parent.
@@ -284,14 +449,15 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  // if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
+    // release(&np->lock);
     return -1;
   }
   np->sz = p->sz;
@@ -313,9 +479,13 @@ fork(void)
   pid = np->pid;
 
   release(&np->lock);
+  release(&np->memlock->lock);
 
   acquire(&wait_lock);
   np->parent = p;
+  if(p->is_thread){
+    np->parent=p->parent;
+  }
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -365,6 +535,17 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
+  for(struct proc *pp=proc;pp<&proc[NPROC];pp++){
+    acquire(&pp->lock);
+    if(pp->mem_id==p->pid){
+      pp->killed=1;
+      if(pp->state==SLEEPING){
+        pp->state=RUNNABLE;
+      }
+    }
+    release(&pp->lock);
+  }
+
   acquire(&wait_lock);
 
   // Give any children to init.
@@ -402,24 +583,39 @@ wait(uint64 addr)
     for(pp = proc; pp < &proc[NPROC]; pp++){
       if(pp->parent == p){
         // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->memlock->lock);
         acquire(&pp->lock);
 
         havekids = 1;
         if(pp->state == ZOMBIE){
-          // Found one.
-          pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
-            release(&pp->lock);
+          // // Found one.
+          // pid = pp->pid;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+
+          if(pp->is_thread){
+            freeproc(pp);
+            continue;
+          }else{
+            pid = pp->pid;
+            if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                    sizeof(pp->xstate)) < 0) {
+              release(&pp->lock);
+              release(&wait_lock);
+              return -1;
+            }
+            freeproc(pp);
+            // release(&pp->lock);
             release(&wait_lock);
-            return -1;
+            return pid;
           }
-          freeproc(pp);
-          release(&pp->lock);
-          release(&wait_lock);
-          return pid;
         }
         release(&pp->lock);
+        release(&pp->memlock->lock);
       }
     }
 
@@ -674,7 +870,7 @@ procdump(void)
   struct proc *p;
   char *state;
 
-  printf("\n");
+  // printf("\n");
   for(p = proc; p < &proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
@@ -683,6 +879,187 @@ procdump(void)
     else
       state = "???";
     printf("%d %s %s", p->pid, state, p->name);
-    printf("\n");
+    // printf("\n");
   }
 }
+
+
+// thread_create
+int
+thread_create(uint64 fcn, uint64 arg, uint64 stack){
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+
+  if(p->killed){
+    return -1;
+  }
+
+  acquire(&p->memlock->lock);
+
+  // Allocate process.
+  if((np = allocproc(1)) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable,0, p->sz) < 0){
+    freeproc(np);
+    // release(&np->lock);
+    return -1;
+  }
+  np->mem_id = p->mem_id;
+  np->memlock = p->memlock;
+  np->sz = p->sz;
+  memlock_add(np->memlock);
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->trapframe->epc = fcn;
+  np->trapframe->sp = stack+PGSIZE - (np->trapframe->sp % 16);
+  np->trapframe->a0 = arg;
+  // np->trapframe->ra = 0xffffffff;
+  np->is_thread = 1;
+  np->mem_id = p->mem_id;
+
+  // Cause fork to return 0 in the child.
+  // np->trapframe->a0 = 0;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+  release(&p->memlock->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  if(p->is_thread){
+    np->parent = p->parent;
+  }
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+// thread_join
+int thread_join(int thread_id){
+  struct proc *pp;
+  // int havekids, pid;
+  struct proc *p = myproc();
+  int mem_id = p->mem_id;
+  acquire(&wait_lock);
+  int found = 0;
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    for(;;){
+      // Scan through table looking for exited children.
+      // havekids = 0;
+      acquire(&pp->lock);
+      if(pp->mem_id == mem_id && pp->pid == thread_id){
+        // make sure the child isn't still in exit() or swtch().
+
+        // havekids = 1;
+        found=1;
+        if(killed(p)){
+          release(&pp->lock);
+          release(&wait_lock);
+          return -1;
+        }
+        if(pp->state == ZOMBIE){
+          // Found one.
+
+          // pid = pp->pid;
+          pp->parent = initproc;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          wakeupOthers(pp,initproc);
+          // freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          // return pid;
+          return thread_id;
+        }
+        release(&pp->lock);
+        sleep(pp, &wait_lock);
+      }else if(found){
+        release(&pp->lock);
+        release(&wait_lock);
+        return thread_id;
+      }else{
+        break;
+      }
+    }
+
+    release(&pp->lock);
+
+    // No point waiting if we don't have any children.
+    // if(!havekids || killed(p)){
+    //   release(&wait_lock);
+    //   return -1;
+    // }
+
+    // // Wait for a child to exit.
+    // sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+
+  release(&wait_lock);
+  return -1;
+}
+
+
+// thread_exit
+void
+thread_exit(void){
+  struct proc *p = myproc();
+
+  if(p == initproc){
+    panic("init exiting");
+  }
+
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+  if(p->parent==initproc){
+    wakeup(initproc);
+  }else{
+    wakeup(p);
+  }
+
+
+  acquire(&p->lock);
+  p->state=ZOMBIE;
+  release(&wait_lock);
+
+  sched();
+  panic("zombie exit");
+  // exit(0);
+
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..135193b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,6 +81,12 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+struct memlock{
+  struct spinlock lock;
+  int count;
+  enum procstate state;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +110,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct memlock* memlock;
+  // struct spinlock memlock;	// find places to set and release the locks
+  int is_thread;               // if it is thread
+  int mem_id;                   // All threads will have the same physical pages with the mothrer, hence the same memory ID
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d687ffd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9afef21 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..c963ba0 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -43,7 +43,8 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  // if(growproc(n) < 0)
+  if(growproc(n,&addr) < 0)
     return -1;
   return addr;
 }
@@ -91,3 +92,29 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create(fcn,arg,stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int threadId;
+  argint(0, &threadId);
+
+  return thread_join(threadId);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..b2e1058 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,10 +296,12 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+// uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz,int is_not_thread)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    //uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, is_not_thread);
   freewalk(pagetable);
 }
 
@@ -339,6 +341,57 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 start,uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  // char *mem;
+
+  start=PGROUNDUP(start);
+  // end=PGROUNDUP(end);
+
+  // for(i = 0; i < end; i += PGSIZE){
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      // kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+uint64
+uvmunmirror(pagetable_t pagetable,uint64 oldsz,uint64 newsz)
+{
+  if(newsz>=oldsz){
+    return oldsz;
+  }
+
+  if(PGROUNDUP(newsz)<PGROUNDUP(oldsz))
+  {
+    //no. of pages
+    int npages=(PGROUNDUP(oldsz)-PGROUNDUP(newsz))/PGSIZE;
+    uvmunmap(pagetable,PGROUNDUP(newsz),npages,0);
+  }
+  return newsz;
+
+}
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..20f8d72
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,40 @@
+#include "kernel/types.h"
+
+
+struct thread_mutex {
+  uint8 mlocked;       
+};
+
+
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->mlocked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  while(__sync_lock_test_and_set(&lk->mlocked, 1) != 0)
+  {
+    sleep(1);
+  }
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+
+  __sync_synchronize();
+
+
+  __sync_lock_release(&lk->mlocked);
+
+
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..4c08ea1
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held
+};
+
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+
+  __sync_synchronize();
+
+
+  __sync_lock_release(&lk->locked);
+
+
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..935a4a4
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,78 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	    if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+    }
+
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..d96d6bf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a334aa7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
